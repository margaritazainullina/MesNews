package mesnews;

import java.net.MalformedURLException;
import java.net.URL;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import mesnews.dao.AuteurDao;
import mesnews.dao.ArticleDao;
import mesnews.model.Auteur;
import mesnews.model.Article;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.BeforeClass;

/**
 *
 * @author Margarita
 */
public class ArticleDaoTest {

    static List<Article> articles;
    static Article testArticle;

    public ArticleDaoTest() {
    }

    @BeforeClass
    public static void setUp() throws MalformedURLException {
        //create test entry
        testArticle = new Article("Article 1", LocalDate.now(), new HashSet<Auteur>(), new URL("http://123.com/1"), "content", false);//read all entrues to collection
        articles = ArticleDao.listArticles();
    }

    @Test
    public void CRUDArticleTest() {
        //save to db
        ArticleDao.saveArticle(testArticle);
        //update autogenerated id
        int id = ArticleDao.listArticles().get(ArticleDao.listArticles().size() - 1).getId();
        testArticle.setId(id);
        //save to collection
        articles.add(testArticle);

        //read from db and collection and compare
        assertEquals(testArticle, ArticleDao.readArticle(testArticle.getId()));
        //list from db and collection and compare
        assertEquals(articles, ArticleDao.listArticles());

        //update entry
        testArticle.setContenu("another content");
        HashSet<Auteur> allAuteurs = new HashSet<>();
        allAuteurs.addAll(AuteurDao.listAuteurs());
        testArticle.setAuteurs(allAuteurs);
        //update in collection
        articles.set(articles.size() - 1, testArticle);
        //update in db
        ArticleDao.updateArticle(testArticle);

        //read from db and collection and compare
        assertEquals(testArticle, ArticleDao.readArticle(testArticle.getId()));
        //list from db and collection and compare
        assertEquals(articles, ArticleDao.listArticles());

        //delete in collection
        articles.remove(testArticle);
        //update in db
        ArticleDao.deleteArticle(testArticle);

        //list from db and collection and compare
        assertEquals(articles, ArticleDao.listArticles());
    }
}
